Title: 
	General Data Generation Simulation


UI Design: 
	***
	Mode: 
		V Data Generate
		  Data Check 
	***
	Folder Structures: 
		folder structure 1:	(Title can be changed)
		(Addable)folder structure 2: 
		(Addable)folder structure 3: 
		(Addable)folder structure 4: 
		...
		-1-
		folder structure 1:
			root dir(level 0): ___(string)___ Ex: S:/Archived/
			(Addable)level 1 subdir: ___(string)___ or ___(number)___ or ___(datetime)___ Ex: (string) Image, Alpha numeric text, Other
			(Addable)level 2 subdir: ___(string)___ or ___(number)___ or ___(datetime)___ 
			(Addable)level 3 subdir: ___(string)___ or ___(number)___ or ___(datetime)___ 
			...
		---
			format ___(string)___: Use ',' as delimiter to seperate each string as subdir name. (N strings can be added with delimiter ',' between them)
			format ___(number)___: choose how many digits, and from what number to what number, and the interval (4 options to fill) 
			format ___(datetime)___: type in the datetime format (1 string to fill)
				Ex:	YYYY-MM-DD hh:mm:ss -> 2021-03-24 14:12:08
					YY -> 21	hhm7 -> 1417 
					MMDDmm -> Illegal 	YYDD -> Illegal 	hhss -> Illegal	(cannot skip in-between)
				*Note that ___(datetime)___ in pattern and level field cannot be combination like YYYYMMDDhhm636. Instead, it should be pure format like hhmmss.
				*Note that ___(datetime)___ only contains at most 14 letters.
				*Only in generating datetime format field, it can be free from the limitation mentioned above. So, hhm736 is legal in that field.
				*___(number)___ format should be saved as string type like folder_struct_example.ini shows. 
				*Note that root dir(level 0) only contains 1 string instead of multiple strings.
				*Note that although there can be multiple filename structures in a single folder structure, those filename structures must have same generating period and generating datetime format. (If not, some issues occur.)
				*Note that every level containing "\" must be written "/". If not so, character will be wrongly explained in some cases. 
			-2- 
			filename structure: 
				pattern 1: ___(string)___ or ___(number)___ or ___(datetime)___ or ___(sequence)___     		delimiter 1: ___(1 string)___
				(Addable) pattern 2: ___(string)___ or ___(number)___ or ___(datetime)___ or ___(sequence)___	delimiter 2: ___(1 string)___
				(Addable) pattern 3: ___(string)___ or ___(number)___ or ___(datetime)___ or ___(sequence)___	delimiter 3: ___(1 string)___
				(Addable) pattern 4: ___(string)___ or ___(number)___ or ___(datetime)___ or ___(sequence)___	delimiter 4: ___(1 string)___
				...
				(Addable) delimiter 1: ___(string)___
				(Addable) delimiter 2: ___(string)___
				(Addable) delimiter 3: ___(string)___	Note that delimiter string should be one character only such as "_". 
				...
				size: ___(1 integer)___
				generating period: ___(period)___
				generating datetime format: ___(datetime)___ Ex: YYYYMMDDhhm606 (Note: this must match with generating period, can be divided completely. And it should be numbers following letters.)
				check delta T1: ___(period)___ 
				check delta T2: ___(period)___ 
			---
				format ___(period)___: how many hour, how many minute, how many second(3 options to fill) 
					Ex: 1 hour 20 min 20 sec -> 4820 seconds (minimum unit is sec)
				*Note that check delta T2 - check delta T1 should be less or equal to generating period. 
				*---0010------------0020------------0030------------0040-----------~
				*...........^...........<...^...........<...^...........<...^......~
				* ^ means start checking point, < end point
				*...<--T1-->........<--T1-->........<--T1-->........<--T1-->.......~
				*...<---------T2-------->...~
				*...........<---T2-T1--->...~
				*T1,T2 cannot be negative number and T2 > T1.
				*Note that generating period format should be only one format. ([YYYYMMDDhhm606,YYYYMMDDhhm636] is not allowed.)
				*Note that generating period format should match with generating period, namely can be divided utterly. YYYYMMDDhhmm606 implies that generating period is 10 min. 
				*Note that if I want generating period to be 15 min: you should create four file structures with same other attributes but generating period format would be YYYYMMDDhh1606,YYYYMMDDhh0106,YYYYMMDDhh3106,YYYYMMDDhh4606 respectively, and generating period 1 hour.
				*Note that pattern/delimiter amount will be N+1/N. Amount of patterns will be 1 more than that of delimiters. 
			--- 
				additional format ___(sequence)___: this must accord to the manam schedule, having 2 parameters: satellite name, product name. Ex: GK2A(find corresponding sat setting in manam_setting.ini), FD 
					*Note that format ___(sequence)___ is really weird, good-for-nothing thing invented by Korean. Only used in GK2A sat case by now. 
			--- 
					Ex: 
						pat1: (string) WV069,VI005 delim1: _
						pat2: (sequence)  		delim1: _
						pat3: (datetime) YYYYMMDDhhm606 delim1: _
						pat4: (number) 01~23 	delim1: _
						pat5: (string) .uhrit 	delim1: 
						-> WV069_001_20210324001606_20.uhrit
			-3- 
			manam structure: 
			level 0: ___(string)___
			*Note manam structure ini setting only contain one string(which is level 0) for each. 
	***
	Format Check and Add
		1. Calculate how many files will be generated in one interval, and the interval 
		2. See if the filename structure of each folder structure conflicts in ___(datetime)___ part. 
		3. Store them into a ini file with good dictionary structure.
		4. See if there is illegal filename structure in folder_struct.(Not exist)
		
	***
	Data Generation Setting: 
		start from: (default: now)
		end at:	(default: never) 
		1. Using the filename structure of every folder structure as filename to generate. 
		2. If many files must be generated at one time, make them at the same time.  
		
----------

	***
	Mode: 
		  Data Generate
		V Data Check 
	***
	1. (Collect Info) Acquire info of data receiving status. 
		a. Target collection: set filename format like above and only collect the info of files in that format. (usually used in the case that filename has fixed format, like satellite data)
		b. Carpet collection: collect all info of files. (usually used in the case that filename has no fixed format, like radar data)
	2. (Analyze Info) Analyze the info 
	3. (Standard Output) Store them into a structured object (namely, dictionary type)
	4. (Other-Formed Outputs) Convert objects into other forms you need
		
		
		